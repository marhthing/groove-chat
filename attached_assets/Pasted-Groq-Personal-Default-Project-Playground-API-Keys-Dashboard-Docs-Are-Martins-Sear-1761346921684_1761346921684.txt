Groq

Personal
/

Default Project
Playground
API Keys
Dashboard
Docs

Are Martins

Search
K
Docs
API Reference
Get Started
Overview
Quickstart
OpenAI Compatibility
Responses API
Models
Rate Limits
Examples
Features
Text Generation
Speech to Text
Text to Speech
Images and Vision
Reasoning
Structured Outputs
Built-In Tools
Web Search
Browser Search
Visit Website
Browser Automation
Code Execution
Wolfram Alpha
Compound
Overview
Systems
Built-In Tools
Use Cases
Advanced Features
Batch Processing
Flex Processing
Content Moderation
Prefilling
Tool Use
Remote MCP
LoRA Inference
Prompting Guide
Prompt Basics
Prompt Patterns
Model Migration
Prompt Caching
Production Readiness
Optimizing Latency
Production Checklist
Security Onboarding
Developer Resources
Groq Libraries
Groq Badge
Integrations Catalog
Console
Spend Limits
Projects
Model Permissions
Billing FAQs
Your Data
Support & Guidelines
Developer Community
OpenBench
Errors
Changelog
Policies & Notices
Wolfram‑Alpha Integration
Copy page

Some models and systems on Groq have native support for Wolfram‑Alpha integration, allowing them to access Wolfram's computational knowledge engine for mathematical, scientific, and engineering computations. This tool enables models to solve complex problems that require precise calculation and access to structured knowledge.

The use of this tool with a supported model or system in GroqCloud is not a HIPAA Covered Cloud Service under Groq's Business Associate Addendum at this time. This tool is also not available currently for use with regional / sovereign endpoints.

Supported Models
Wolfram‑Alpha integration is supported for the following models and systems (on versions later than 2025-07-23):

Model ID	Model
groq/compound

Compound
groq/compound-mini

Compound Mini

For a comparison between the groq/compound and groq/compound-mini systems and more information regarding extra capabilities, see the Compound Systems page.

Quick Start
To use Wolfram‑Alpha integration, you must provide your own Wolfram‑Alpha API key in the wolfram_settings configuration. The examples below show how to access all parts of the response: the final content, reasoning process, and tool execution details.


python

import json
from groq import Groq

client = Groq(
    default_headers={
        "Groq-Model-Version": "latest"
    }
)

chat_completion = client.chat.completions.create(
    messages=[
        {
            "role": "user",
            "content": "What is 1293392*29393?",
        }
    ],
    model="groq/compound",
    compound_custom={
        "tools": {
            "enabled_tools": ["wolfram_alpha"],
            "wolfram_settings": {"authorization": "your_wolfram_alpha_api_key_here"}
        }
    }
)

message = chat_completion.choices[0].message

# Print the final content
print(message.content)

# Print the reasoning process
print(message.reasoning)

# Print executed tools
if message.executed_tools:
    print(message.executed_tools[0])
These examples show how to access the complete response structure to understand the Wolfram‑Alpha computation process.


When the API is called with a mathematical or scientific query, it will automatically use Wolfram‑Alpha to compute precise results. The response includes three key components:

Content: The final synthesized response from the model with computational results
Reasoning: The internal decision-making process showing the Wolfram‑Alpha query
Executed Tools: Detailed information about the computation that was performed
How It Works
When you ask a computational question:

Query Analysis: The system analyzes your question to determine if Wolfram‑Alpha computation is needed
Wolfram‑Alpha Query: The tool sends a structured query to Wolfram‑Alpha's computational engine
Result Processing: The computational results are processed and made available to the model
Response Generation: The model uses both your query and the computational results to generate a comprehensive response
Final Output
This is the final response from the model, containing the computational results and analysis. The model can provide step-by-step solutions, explanations, and contextual information about the mathematical or scientific computation.


Reasoning and Internal Tool Calls
This shows the model's internal reasoning process and the Wolfram‑Alpha computation it executed to solve the problem. You can inspect this to understand how the model approached the problem and what specific query it sent to Wolfram‑Alpha.


Tool Execution Details
This shows the details of the Wolfram‑Alpha computation, including the type of tool executed, the query that was sent, and the computational results that were retrieved.


Usage Tips
API Key Required: You must provide your own Wolfram‑Alpha API key in the wolfram_settings.authorization field to use this feature.
Mathematical Queries: Best suited for mathematical computations, scientific calculations, unit conversions, and factual queries.
Structured Data: Wolfram‑Alpha returns structured computational results that the model can interpret and explain.
Complex Problems: Ideal for problems requiring precise computation that go beyond basic arithmetic.
Getting Your Wolfram‑Alpha API Key
To use this integration:

Visit Wolfram‑Alpha API
Sign up for an account and choose an appropriate plan
Generate an API key from your account dashboard
Use the API key in the wolfram_settings.authorization field in your requests
Pricing
Groq does not charge for the use of the Wolfram‑Alpha built-in tool. However, you will be charged separately by Wolfram Research for API usage according to your Wolfram‑Alpha API plan.

Provider Information
Wolfram Alpha functionality is powered by Wolfram Research, a computational knowledge engine.

Was this page helpful?

Yes

No

Suggest Edits
On this page
Supported Models
Quick Start
How It Works
Usage Tips
Getting Your Wolfram‑Alpha API Key
Pricing
Provider Information
Wolfram‑Alpha Integration - GroqDocs